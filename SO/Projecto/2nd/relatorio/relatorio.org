#+options: toc:nil
#+title: Projeto de Sistemas Operativos
#+author: Carolina Silva, Cristina Pinto, João Fraga
#+date: \today
#+latex_class: article
#+latex_class_options:
#+latex_header:
#+latex_header_extra:
#+description:
#+keywords:
#+subtitle:
#+latex_compiler: pdflatex

#+LATEX: \maketitle

#+LATEX: \pagebreak{}
#+LATEX: \tableofcontents
#+LATEX: \listoffigures
#+LATEX: \listoftables

#+LATEX: \pagebreak{}
* Introdução

Este trabalho cite:enunciado tem como objetivo o desenvolvimento de uma estrutura de dados sincronizada para ser utilizada numa aplicação servidor e cliente.
O projeto cite:enunciado tem também como objetivos o desenvolvimento de um servidor de ficheiros, que deverá usar multithreading para atender clientes em simultâneo, e uma aplicação para clientes, onde podem inserir, visualizar e apagar mensagens contidas em filas.

Assim, no servidor, foram desenvolvidos os ficheiros server.h (onde estão contidos todos os protótipos das funções associadas ao servidor) e server.c (onde está o programa principal do servidor e as funções referentes ás threads, lists e ao funcionamento do próprio servidor e o menu principal).

No Cliente,  foram desenvolvidos os ficheiros client.h (com os protótipos de funções) e client.c (onde se encontra o programa principal, bem como as funções connect, getmenu, dowhile, sendoption e parseoutput.

Como suporte para o desenvolvimento deste trabalho, recorremos aos materiais fornecidos pelo docente da unidade curricular, bem como a bibliografia de referência sugerida para esta disciplina.

#+LATEX: \pagebreak{}
* Estrutura do projeto

#+CAPTION: Estrutura de ficheiros do projeto
#+NAME:   fig:estrutura
[[./img/estrutura.png]]

O projeto está dividido em 3 pastas principais: root, client e server.

A pasta root é a pasta raiz da funcionalidade de tratamento de ficheiros do nosso servidor.
Esta pasta contém duas subpastas (files e secret) que por sua vez contêm ficheiros sem, ou, com password respetivamente.

A pasta client contém todo o código relativo ao programa cliente e uma subpasta tests com código relativo aos testes automaticos.

A pasta server contém todo o código relativo ao programa servidor.

#+LATEX: \pagebreak{}
* Cliente

** Abordagem de cliente

Durante a realização do nosso projeto decidimos fazer do cliente um programa "dumb" que apenas interpreta mensagens do servidor e pede input ao utilizador, não efectuando nenhum processamento local.

** Client

Este programa vai permitir a um cliente interagir com o servidor.

#+CAPTION: Menu principal
#+NAME:   fig:estrutura
[[./img/mainmenu.png]]

#+CAPTION: Menu queue sem listas criadas
#+NAME:   fig:queue1
[[./img/queue1.png]]

#+CAPTION: Menu queue com listas criadas
#+NAME:   fig:queue2
[[./img/queue2.png]]

*** connect

Vai permitir ao cliente aceder a informação do pipe individual que o servidor estabelece para ele.

*** get menu

Esta função vai permitir que o cliente tenha acesso ao menu inicial.

*** do while

Esta função vai imprimir continuamente menus e faz chamadas ao send options.

*** send options

Vai estar a tratar continuamente o que vai ser necessário enviar ao cliente, fazendo uso de uma função auxiliar parse output.

*** parse output

Esta função vai fazer a interpretação de comandos enviados pelo servidor.

#+CAPTION: Mensagens a receber do servidor e as suas respectivas descrições
#+LABEL: tab:messages
|-----------+--------------------------------------------------------------------------------------|
| Mensagens | Descrição                                                                            |
|-----------+--------------------------------------------------------------------------------------|
| id        | Esta mensagem é utilizada para pedir ao utilizador o id de uma fila                  |
| idp       | Esta mensagem é utilizada para pedir o id de uma mensagem                            |
| filename  | Esta mensagem é utilizada para pedir o nome de um ficheiro                           |
| message   | Esta mensagem é utilizada para pedir uma mensagem para uma lista                     |
| password  | Esta mensagem é utilizada para pedir a password dos ficheiros secretos               |
| invalid   | Esta mensagem é utilizada para indicar uma opção invalida                            |
| print     | Esta mensagem é utilizada para indicar o envio de informação a imprimir              |
| error     | Esta mensagem é utilizada para indicar a occorência de um erro                       |
| file      | Esta mensagem é utilizada para indicar o envio do conteúdo de um ficheiro a imprimir |
|-----------+--------------------------------------------------------------------------------------|

*** read file cite:Chapter10

Esta função vai ler o ficheiro pedido até ao fim.

#+LATEX: \pagebreak{}
* Servidor

** Threads cite:Chapter9

#+CAPTION: Esquema de threads
#+NAME:   fig:threads
[[./img/threads.jpeg]]

Neste trabalho efetuou-se uma abordagem de um servidor multithreaded, em que para cada pedido de conecção de um cliente é criada uma thread para servir o mesmo.

De modo a garantir o constante funcionamento do servidor foi necessário ignorar os broken pipes obtidos quando um cliente termina.
Para isto utilizou-se a função signal(SIGPIPE,  SIG IGN). cite:signal2
Assim foi possível realizar o unlink dos pipes estabelecidos com essa thread não causando problemas no servidor.

** Primeira comunicação

#+CAPTION: Comunicação inicial entre clientes e servidores cite:Chapter11 cite:Chapter12
#+NAME:   fig:handshake
[[./img/handshake.jpeg]]

Inicialmente os clientes utilizam um pipe comum (FIFO1 & FIFO2) para se conectarem ao servidor e realizarem um handshake.
O servidor utiliza este pipe para informar os clientes sobre quais os novos fifos a utilizar.
Deste modo as comunicações realizadas entre um cliente e o servidor são efectuadas através de um pipe privado.

** Main

Esta é a função principal do servidor a partir da qual o mesmo começa a execução.
Aqui corre um loop infinito onde são descobertas conecções e criadas threads para lidar com as mesmas. cite:Chapter9

** Server

Esta função vai executar a thread individual de cada cliente, e permite que o cliente possa usufruir de todas as funcionalidades do servidor.
O servidor terá a função de informar o cliente sobre as opções que este pode tomar e age de acordo.

** Protocolo de comunicação

#+CAPTION: Protocolo de comunicação um cliente e o servidor
#+NAME:   fig:protocol
[[./img/protocol.jpeg]]

Após o handshake inicial e a criação de um canal de comunicação privado, a comunicação entre o cliente e o servidor inicia-se com um pedido do menu por parte do cliente.
O servidor responde com o menu inicial.

Conforme as opções tomadas pelo utilizador o servidor poderá fornecer novos menus, enviar mensagens de resposta e solicitar o envio de informação.

** Listas

*** funções auxiliares

Implementamos algumas funções auxiliares que serão utilizadas na execução de outras funções principais, nomedamante:
- make node
- push
- pop
- is empty list
- print list
- count list
- print message list

*** server queue

Esta é a função a partir da qual são selecionadas todas as funcionalidades referentes ás filas.
O servidor apenas apresenta as opções que se encontram disponiveis para ultilização pelo cliente.

Todas estas funções fazem uso de um lock para se manterem sincronizadas. cite:Chapter13

**** create queue

Esta função vai permitir criar uma fila.

**** check queue

Esta função vai mostrar quais são os IDs das fila que existem.

**** check messages

Esta função vai permitir mostrar os IDs das mensagens de uma determinada fila.

**** insert message

Esta função vai verificar se o ID é válido e insere a mensagem na fila correspondente.

**** print message

Esta função imprime uma mensagem com um determinado ID de uma determinadas lista.

**** delete message

Esta função vai apagar uma mensagem de uma determinada lista.

** Ficheiros

*** server file

Esta é a função a partir da qual são executadas todas as funcionalidades referentes aos ficheiros. cite:Chapter10

É solicitado ao cliente um nome de um ficheiro e caso este exista, e lhe enviada a informação contida no ficheiro.
Se o ficheiro estiver na pasta secret, é requerido ao cliente a password.

**** print file

Esta função vai enviar para o cliente toda a informação referente a um determinado ficheiro.

#+LATEX: \pagebreak{}
* Testes

Este programa vai permitir fazer testes para verificar a correta implementação do servidor de filas.
Para isto, serão criadas várias threads para simular o acesso ao servidor por varios clientes. cite:Chapter9
Cada um destes clientes realizará várias das diferentes operações de filas em simultâneo de modo a validar a correcta implementação do servidor de filas multithreaded. cite:Chapter9

#+LATEX: \pagebreak{}
* Conclusão

O desenvolvimento deste projeto ajudou no aprofundamento de competências de Sistemas Operativos, nomeadamente no desenvolvimento, implementação e especificação de estruturas de dados clássica, utilização de listas e filas e implementações thread e multithread, bem como no desenvolvimento de um servidor aplicacional.

Assim, o desenvolvimento do projeto proposto na unidade curricular de Sistemas Operativos foi bastante enriquecedor, pois permitiu mobilizar os conteúdos apreendidos no decorrer das aulas teóricas e práticas.

#+LATEX: \pagebreak{}
bibliographystyle:plain
bibliography:refs.bib
